{"version":3,"sources":["components/landing.js","components/boatsegment.js","components/squaresegment.js","components/square.js","components/boardsetup.js","components/setupoptions.js","components/boatselectoritem.js","components/boatselector.js","components/setup.js","components/boatsstatusbar.js","components/playermessage.js","components/squareplay.js","components/boardplay.js","components/gamestats.js","components/playcontainer.js","components/play.js","components/winneroverlay.js","components/game.js","components/header.js","components/footer.js","components/app.js","index.js"],"names":["Landing","props","id","nameLabel","label","currentPlayer","className","style","border","errorMessage","type","placeholder","name","onBlur","BoatSegment","status","boatLength","classlist","this","SquareSegment","Square","activeClassList","nonActiveClassList","currentClassList","coords","square","length","i","onMouseOver","onMouseOut","onClick","BoardSetup","myBoard","boardArray","map","rowArray","rowIndex","squareValue","columnIndex","React","Component","SetupOptions","value","defaultChecked","axisPlacementClick","htmlFor","resetClick","buttonEvent","buttonMessage","BoatSelectorItem","classList","boatlength","boat","xmlns","height","width","viewBox","fill","d","BoatSelector","myBoats","boatsArray","item","count","Setup","player","history","useHistory","player1","advanceToNextPlayer","player2","advanceToPlay","push","boats","boatSelectorClick","board","squareSelectorClick","BoatsStatusBar","statusBar","PlayerMessage","message","STATUS_MISS","SquarePlay","BoardPlay","overlay","guessClick","overlayText","GameStats","hitPercentage","colorHitClass","colorPercentClass","numGuesses","numHits","numMisses","size","boatsSunk","Math","round","color","PlayContainer","nameTag","player2Name","player1Name","position","otherPlayerMessage","Play","boardDisplay","class","display","displayWinner","winnerText","fontSize","paddingTop","window","pushState","location","reload","STATUS_SETUP","SQUARE_CLASS","PLAYER_1","PLAYER_2","NO_STATUS","VERTICAL_AXIS","STATUS_AFLOAT","STATUS_SUNK","STATUS_PLAYING","setUpBoard","boardSetup","Array","Game","state","Set","boatBeingPlacedLength","placementAxis","tempboatCoords","boatsAlreadyPlaced","handleStartSetup","bind","handleAdvanceToSetup","handlePlaceBoatHover","handlePlaceBoatHoverOut","handlePlaceBoatClick","handleSetBoatToPlace","handleAxisPlacementChange","getSquareElement","updateBoard","updateBoats","handleResetSetup","handleAdvanceToPlay","handleAdvanceToNextPlayer","handleGuessClick","getCoords","checkGoodToPlaceHover","checkGoodToPlaceClick","handleAdvancePlayer","checkName","playerBoats","goodToPlace","forEach","coordinates","boatPlacedCoords","potentialBoat","potentialCoord","potentialX","potentialY","coord","playerName","undefined","newErrorMessage","setState","squareID","target","attributes","document","getElementById","split","Number","event","prevState","Object","assign","newBoard","newCoordsArray","boatBeingPlaced","has","console","log","newCoords","canPlace","newBoats","boatToPlaceCoords","add","playerGuessing","targetBoard","hiddenBoats","winner","newNumGuesses","newNumHits","boatToSink","targetBoatLength","squareClicked","newWinnerText","isNaN","tempElement","remove","axis","newAxis","path","href","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.5983cf74.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/index.css';\r\n\r\n\r\nfunction Landing (props) {\r\n\r\n    let id, nameLabel, label;\r\n\r\n    if(props.currentPlayer === \"player1\"){\r\n        id = \"p1\";\r\n        nameLabel = props.currentPlayer;\r\n        label = \"Player 1: \"\r\n    } else {\r\n        id = \"p2\";\r\n        nameLabel = props.currentPlayer;\r\n        label = \"Player 2: \"\r\n    }\r\n\r\n    return (\r\n        <div className=\"center landing column\" style={{border: \"none\"}}>\r\n            <p className=\"landing-error\">{props.errorMessage}</p>\r\n            <label ><strong>{label}</strong></label>\r\n            <input id={id} type=\"text\" placeholder=\"enter name\" name={nameLabel} onBlur={props.onBlur}></input>\r\n            <br></br>\r\n            <br></br>\r\n            <div>Instructions:</div>\r\n            <p>Hover over the map and click the square where you want to place your boat. <i>Make sure the other player does not peak!</i></p>\r\n                <p>You can clear your boats if you want to re-position them.</p>\r\n               <p> Use the vertical/horizontal selector to place your boat either veritcally or horizontally.</p>\r\n               <p>Click 'Next Player' for the next player to set their boats, then PLAY!</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Landing;","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nclass BoatSegment {\r\n    constructor(status, boatLength, classlist){\r\n        this.status = status;\r\n        this.boatLength = boatLength;\r\n        this.classlist = classlist;\r\n    }\r\n}\r\n\r\nexport default BoatSegment;\r\n\r\n","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nclass SquareSegment {\r\n    constructor(status = \"empty\", boatLength = 0, classlist = [\"square\"]){\r\n        this.status = status;\r\n        this.boatLength = boatLength;\r\n        this.classlist = classlist;\r\n    }\r\n}\r\n\r\nexport default SquareSegment;\r\n\r\n","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nfunction Square (props) {\r\n\r\n    let id = `square${props.coords}`\r\n    let activeClassList;\r\n    let nonActiveClassList;\r\n    let currentClassList;\r\n\r\n    if(props.square.boatLength){\r\n        currentClassList = props.square.classlist;\r\n        if(currentClassList.length > 0){\r\n            activeClassList = \"\";\r\n            for(let i=0; i<currentClassList.length; i++){\r\n                activeClassList += `${currentClassList[i]} `;\r\n            }\r\n        }\r\n        return(\r\n            <div\r\n                className={activeClassList}\r\n                id={id}\r\n                onMouseOver={props.onMouseOver}\r\n                onMouseOut={props.onMouseOut}\r\n                coords={props.coords}\r\n                onClick={props.onClick}\r\n                >\r\n                </div>\r\n        );\r\n    } else {\r\n        nonActiveClassList = props.square.classlist[0];\r\n        return(\r\n            <div\r\n                className={nonActiveClassList}\r\n                id={id}\r\n                onMouseOver={props.onMouseOver}\r\n                onMouseOut={props.onMouseOut}\r\n                coords={props.coords}\r\n                onClick={props.onClick}\r\n                ></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './square'\r\nimport '../styles/index.css';\r\n\r\nclass BoardSetup extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n\r\n        //Building out the board with JSX\r\n        const myBoard = this.props.boardArray.map((rowArray, rowIndex) =>{\r\n            return (\r\n                //NEEDSWORK: Needs a key property\r\n\r\n                <div className=\"board-row\" key={rowIndex}\r\n                >{rowArray.map((squareValue, columnIndex) => {\r\n                    return (\r\n                        <Square\r\n                            key={rowIndex,columnIndex} //kind of just put this here. Not sure if there will be errors in the\r\n                            onMouseOver={this.props.onMouseOver}\r\n                            onMouseOut={this.props.onMouseOut}\r\n                            square={squareValue}\r\n                            coords={[rowIndex,columnIndex]}\r\n                            onClick={this.props.onClick}\r\n                            ></Square>\r\n                    )\r\n                })}</div>\r\n            );\r\n        })\r\n\r\n        return(\r\n            <div className=\"center\">\r\n                <div className=\"board-container\">{myBoard}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BoardSetup;","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nfunction SetupOptions (props) {\r\n\r\n    return(\r\n        <div className=\"setup-options-container\">\r\n            <div className=\"radio-toolbar\">\r\n                <input type=\"radio\" name=\"axis-placement\" id=\"vertical-axis\" value=\"vertical\" defaultChecked={true}\r\n                        onClick={props.axisPlacementClick}></input>\r\n                <label htmlFor=\"vertical-axis\">Vertical</label>\r\n\r\n                <input type=\"radio\" name=\"axis-placement\" id=\"horizontal-axis\" value=\"horizontal\"\r\n                        onClick={props.axisPlacementClick}></input>\r\n                <label htmlFor=\"horizonal-axis\">Horizontal</label>\r\n            </div>\r\n            <div>\r\n                <button className=\"btn btn-clear-boats\"\r\n                        onClick={props.resetClick}>\r\n                Clear Boats</button>\r\n                <button className=\"btn btn-play\"\r\n                        onClick={props.buttonEvent}\r\n                    >{props.buttonMessage}</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetupOptions;","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nfunction BoatSelectorItem (props) {\r\n    return(\r\n            <span\r\n                className={props.classList}\r\n                onClick={props.onClick}\r\n                boatlength={props.boat.length}\r\n                id={props.id}>\r\n                    <svg\r\n                        boatlength={props.boatlength}\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        height=\"30\" width=\"30\"\r\n                        viewBox=\"0 0 24 24\">\r\n                            <rect fill=\"none\" height=\"24\" width=\"24\"/>\r\n                        <path\r\n                        boatlength={props.boatlength}\r\n                        d=\"M11,13.5V2L3,13.5H11z M21,13.5C21,6.5,14.5,1,12.5,1c0,0,1,3,1,6.5s-1,6-1,6H21z M22,15H2c0.31,1.53,1.16,2.84,2.33,3.73 C4.98,18.46,5.55,18.01,6,17.5C6.73,18.34,7.8,19,9,19s2.27-0.66,3-1.5c0.73,0.84,1.8,1.5,3,1.5s2.26-0.66,3-1.5 c0.45,0.51,1.02,0.96,1.67,1.23C20.84,17.84,21.69,16.53,22,15z M22,23v-2h-1c-1.04,0-2.08-0.35-3-1c-1.83,1.3-4.17,1.3-6,0 c-1.83,1.3-4.17,1.3-6,0c-0.91,0.65-1.96,1-3,1H2l0,2h1c1.03,0,2.05-0.25,3-0.75c1.89,1,4.11,1,6,0c1.89,1,4.11,1,6,0h0 c0.95,0.5,1.97,0.75,3,0.75H22z\"\r\n                        />\r\n                    </svg>\r\n                    {props.boat.length}\r\n            </span>\r\n    )\r\n}\r\n\r\nexport default BoatSelectorItem;","import React from 'react';\r\nimport SetupOptions from './setupoptions'\r\nimport BoatSelectorItem from './boatselectoritem';\r\nimport '../styles/index.css';\r\n\r\nfunction BoatSelector (props) {\r\n\r\n        const myBoats = props.boatsArray.map((item, count) => {\r\n            let id = `${item.name}-selector`\r\n            let classList = `boat-selector-item boat-selector-${item.status}`\r\n            return (\r\n                <BoatSelectorItem classList={classList}\r\n                    onClick={props.onClick}\r\n                    boatlength={item.length}\r\n                    key={item.name}\r\n                    id={id}\r\n                    length={item.length}\r\n                    boat={item}\r\n                    ></BoatSelectorItem>\r\n            );\r\n        })\r\n\r\n        return(\r\n              <div className=\"boat-selector-container\">\r\n                   <SetupOptions\r\n                        axisPlacementClick={props.axisPlacementClick}\r\n                        resetClick={props.resetClick}\r\n                        buttonEvent={props.buttonEvent}\r\n                        buttonMessage={props.buttonMessage}>\r\n                    </SetupOptions>\r\n                    <div>{myBoats}</div>\r\n                </div>\r\n\r\n\r\n        );\r\n\r\n}\r\n\r\nexport default BoatSelector;","import React from 'react';\r\nimport BoardSetup from './boardsetup';\r\nimport BoatSelector from'./boatselector'\r\nimport { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport '../styles/index.css';\r\n\r\nfunction Setup (props) {\r\n        let player;\r\n        let buttonMessage;\r\n        let buttonEvent;\r\n        const history = useHistory();\r\n\r\n        if(props.player1.status === \"setup\"){\r\n            player = props.player1;\r\n            buttonMessage = \"Next Player\"\r\n            buttonEvent = props.advanceToNextPlayer;\r\n        } else if (props.player2.status === \"setup\"){\r\n            player = props.player2;\r\n            buttonMessage = \"Play\";\r\n            buttonEvent = props.advanceToPlay\r\n        } else{\r\n            //this is the only way I could get it to stop throwing an error when\r\n            //advancing to /play\r\n            player = props.player1;\r\n            history.push('/play');\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"center column\" style={{border: \"none\"}}>\r\n                {/* <div className=\"game-header\"><b>{player.id}</b> place boats</div> */}\r\n                <BoatSelector\r\n                    boatsArray={player.boats}\r\n                    onClick={props.boatSelectorClick}\r\n                    axisPlacementClick={props.axisPlacementClick}\r\n                    resetClick={props.resetClick}\r\n                    buttonEvent={buttonEvent}\r\n                    buttonMessage={buttonMessage}\r\n                ></BoatSelector>\r\n                <br></br>\r\n                <BoardSetup\r\n                    boardArray={player.board}\r\n                    onMouseOver={props.onMouseOver}\r\n                    onMouseOut={props.onMouseOut}\r\n                    onClick={props.squareSelectorClick}/>\r\n                <br></br>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Setup;","import React from 'react';\r\nimport BoatSelectorItem from './boatselectoritem'\r\nimport '../styles/index.css';\r\n\r\n\r\nfunction BoatsStatusBar (props) {\r\n\r\n    const statusBar = props.boats.map((boat) => {\r\n        let classList = `boat-status-bar-item boat-selector-${boat.status}`\r\n\r\n        return(\r\n            <BoatSelectorItem\r\n                boat={boat}\r\n                classList={classList}\r\n                key={boat.name}\r\n            ></BoatSelectorItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"boat-status-bar\">\r\n           {statusBar}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoatsStatusBar;","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nfunction PlayerMessage (props) {\r\n\r\n    return (\r\n        <div className=\"player-message\">{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default PlayerMessage;","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nconst STATUS_HIT = \"hit\";\r\nconst STATUS_MISS = \"miss\";\r\nconst STATUS_SUNK = \"sunk\";\r\nconst STATUS_AFLOAT = \"afloat\";\r\nconst NO_STATUS = \"none\";\r\n\r\nfunction SquarePlay (props) {\r\n    let value = \"\";\r\n    const id = `square${props.coords}`\r\n    const square = props.square\r\n    let currentClassList;\r\n\r\n    //if square.status === hit, miss or sunk\r\n        //then display 'square square.status' as class\r\n        //and disable onMouseOver, onMouseOut and onClick\r\n            //if miss, then value = X\r\n\r\n    if(square.status === STATUS_HIT || square.status === STATUS_MISS || square.status === STATUS_SUNK){\r\n        currentClassList = `${square.classlist[0]} ${square.classlist[1]}`;\r\n    } else {\r\n        currentClassList = square.classlist[0];\r\n    }\r\n\r\n    if(square.status === STATUS_MISS){\r\n        value = 'x';\r\n    }\r\n\r\n    //if square.status === active or none\r\n        //then display class only as 'square'\r\n        //and enable onClick, onMouseOver, onMouseOut\r\n\r\n\r\n    return(\r\n        <div\r\n            id={id}\r\n            className={currentClassList}\r\n            coords={props.coords}\r\n            onClick={props.onClick}\r\n            // onMouseOver={}\r\n            // onMouseOut={}\r\n        >{value}</div>\r\n    );\r\n\r\n}\r\n\r\nexport default SquarePlay;\r\n","import React from 'react';\r\nimport SquarePlay from './squareplay'\r\nimport '../styles/index.css';\r\n\r\n\r\nfunction BoardPlay (props) {\r\n    const myBoard = props.board.map((rowArray, rowIndex) =>{\r\n        return (\r\n            <div className=\"board-row\" key={rowIndex}\r\n            >{rowArray.map((square, columnIndex) => {\r\n                return (\r\n                    <SquarePlay\r\n                        key={rowIndex,columnIndex}\r\n                        // onMouseOver={this.props.onMouseOver}\r\n                        // onMouseOut={this.props.onMouseOut}\r\n                        square={square}\r\n                        coords={[rowIndex,columnIndex]}\r\n                        overlay={props.overlay}\r\n                        onClick={props.guessClick}\r\n                        ></SquarePlay>\r\n                )\r\n            })}</div>\r\n        );\r\n    })\r\n\r\n    return(\r\n        <div className=\"center\">\r\n            <div className=\"board-container\">\r\n                {myBoard}\r\n                <div className={props.overlay}>\r\n                    <div className=\"player-overlay-text\">{props.overlayText}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BoardPlay;\r\n\r\n\r\n{/* <div className=\"center\">\r\n<div className=\"board-container\">\r\n    <div className=\"board-shadow\">\r\n    {myBoard}\r\n        <div className={props.overlay}>\r\n            <div className=\"player-overlay-text\">{props.overlayText}</div>\r\n        </div>\r\n    </div>\r\n    <GameStats\r\n    player={props.player}\r\n></GameStats>\r\n</div>\r\n</div> */}","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nconst POSSIBLE_HITS = 21;\r\n\r\nfunction GameStats (props) {\r\n    let numGuesses = props.player.numGuesses;\r\n    let numHits = props.player.numHits;\r\n    let numMisses = numGuesses - numHits\r\n    let hitPercentage;\r\n    let colorHitClass;\r\n    let colorPercentClass;\r\n    let size = props.player.boatsSunk.size;\r\n\r\n    numGuesses === 0 ? hitPercentage = 0 : hitPercentage = Math.round((numHits/numGuesses)*100);\r\n\r\n    numHits > 0 ? colorHitClass = \"green\" : colorHitClass = \"red\";\r\n    if(hitPercentage > 45){\r\n        colorPercentClass = \"rgb(0, 192, 0)\";\r\n    } else if (hitPercentage > 20){\r\n        colorPercentClass = \"orange\";\r\n    } else {\r\n        colorPercentClass = \"red\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"game-stats-container\">\r\n            <span className=\"game-stat-item\">Hits: <span style={{color:`${colorHitClass}`}}>{numHits}</span>/{POSSIBLE_HITS}</span>\r\n            <span className=\"game-stat-item\" >Misses: {numMisses}</span>\r\n            <span  className=\"game-stat-item\">Hit Percentage: <span style={{color:`${colorPercentClass}`}}>{hitPercentage}</span>%</span>\r\n            <span  className=\"game-stat-item\">Sinks: {size}</span>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default GameStats;","import React from 'react';\r\nimport BoatsStatusBar from './boatsstatusbar'\r\nimport PlayerMessage from './playermessage'\r\nimport BoardPlay from './boardplay'\r\nimport GameStats from './gamestats'\r\nimport { useState } from 'react'\r\nimport '../styles/index.css';\r\n\r\n\r\nfunction PlayContainer (props) {\r\n\r\n    //setting overlay variable based on current player\r\n    let overlay, overlayText;\r\n     if(props.currentPlayer === props.player.id){\r\n        overlay = \"player-overlay\";\r\n        overlayText = \"Wait for next player's move.\"\r\n     } else {\r\n        overlay = \"\";\r\n        overlayText = \"\";\r\n     }\r\n\r\n     let nameTag;\r\n     props.player.id === \"player1\" ? nameTag = props.player2Name : nameTag = props.player1Name;\r\n\r\n    return (\r\n        <div style={{position: \"relative\"}}>\r\n            <div className=\"player-name-tag\">{nameTag}</div>\r\n            <PlayerMessage  message={props.player.otherPlayerMessage}></PlayerMessage>\r\n            <BoatsStatusBar boats={props.player.boats}></BoatsStatusBar>\r\n            <BoardPlay\r\n                board={props.player.board}\r\n                overlay={overlay}\r\n                guessClick={props.guessClick}\r\n                overlayText={overlayText}\r\n                player={props.player}\r\n            ></BoardPlay>\r\n            <GameStats\r\n                player={props.player}\r\n            ></GameStats>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayContainer;","import React from 'react';\r\nimport Board from './boardsetup'\r\nimport '../styles/index.css';\r\nimport PlayContainer from './playcontainer';\r\n\r\nfunction Play (props) {\r\n\r\n    const players = [props.player2,props.player1];\r\n\r\n    const boardDisplay = players.map((player, count) => {\r\n\r\n        return(\r\n            <div class=\"column\" key={count}>\r\n\r\n                <PlayContainer\r\n                    player={player}\r\n                    currentPlayer={props.currentPlayer}\r\n                    guessClick={props.guessClick}\r\n                    player1Name={props.player1Name}\r\n                    player2Name={props.player2Name}\r\n                ></PlayContainer>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return(\r\n        <div class=\"row center\">\r\n            {boardDisplay}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Play;","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nfunction PlayerMessage (props) {\r\n\r\n    return (\r\n        <div className=\"winner-overlay\" style={{display:`${props.displayWinner}`}}>\r\n            <div className=\"winner-overlay-text center\">\r\n                {props.winnerText}\r\n                <br></br>\r\n                <span style={{fontSize: \"26px\", paddingTop: \"1em\"}}>YOU WON!</span>\r\n                <br></br>\r\n                <br></br>\r\n                <button className=\"btn btn-reset\"\r\n                    onClick={() => {window.history.pushState({}, '','/project-battleship'); window.location.reload()}}>\r\n                Restart Game</button>\r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default PlayerMessage;","import React from 'react';\r\nimport Landing from './landing';\r\nimport BoatSegment from './boatsegment';\r\nimport SquareSegment from './squaresegment';\r\nimport Setup from './setup';\r\nimport Play from './play';\r\nimport WinnerOverlay from './winneroverlay'\r\nimport '../styles/index.css';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\r\n\r\nconst STATUS_LANDING = \"landing\";\r\nconst STATUS_SETUP = \"setup\";\r\nconst SQUARE_CLASS = \"square\";\r\nconst SQUARE_HOVER_CLASS = \"square-hover\";\r\nconst SQUARE_ACTIVE_CLASS = \"square-active\";\r\nconst SQUARE_MISS_CLASS = \"square-miss\";\r\nconst SQUARE_HIT_CLASS = \"square-hit\";\r\nconst SQUARE_SUNK_CLASS = \"square-sunk\";\r\nconst PLAYER_1 = \"player1\";\r\nconst PLAYER_2 = \"player2\"\r\nconst NO_STATUS = \"none\";\r\nconst STATUS_HOVER = \"hover\"\r\nconst STATUS_ACTIVE = \"active\";\r\nconst VERTICAL_AXIS = \"vertical\";\r\nconst HORIZONTAL_AXIS = \"horizontal\";\r\nconst STATUS_AFLOAT = \"afloat\";\r\nconst STATUS_SUNK = \"sunk\";\r\nconst STATUS_HIT = \"hit\";\r\nconst STATUS_MISS = \"miss\";\r\nconst STATUS_PLAYING = \"playing\";\r\n\r\nfunction setUpBoats ()\r\n{    const boatsSetup = [\r\n    {\"name\": \"boat1\",\r\n        \"length\": 1,\r\n        \"coordinates\": [],\r\n        \"status\": \"active\", //afloat or sunk\r\n        \"numHits\": 0,\r\n    },\r\n    {\"name\": \"boat2\",\r\n        \"length\": 2,\r\n        \"coordinates\": [],\r\n        \"status\": \"\", //afloat or sunk\r\n        \"numHits\": 0,\r\n    },\r\n    { \"name\": \"boat3\",\r\n        \"length\": 3,\r\n        \"coordinates\": [],\r\n        \"status\": \"\", //afloat or sunk\r\n        \"numHits\": 0,\r\n    },\r\n    {  \"name\": \"boat4\",\r\n        \"length\": 4,\r\n        \"coordinates\": [],\r\n        \"status\": \"\", //afloat or sunk\r\n        \"numHits\": 0,\r\n    },\r\n    {  \"name\": \"boat5\",\r\n        \"length\": 5,\r\n        \"coordinates\": [],\r\n        \"status\": \"\", //afloat or sunk\r\n        \"numHits\": 0,\r\n    },\r\n    {  \"name\": \"boat6\",\r\n        \"length\": 6,\r\n        \"coordinates\": [],\r\n        \"status\": \"\", //afloat or sunk\r\n        \"numHits\": 0,\r\n    },\r\n    ]\r\n    return boatsSetup;\r\n}\r\n\r\nfunction setUpBoard() {\r\n     let boardSetup = [];\r\n    for(let i=0;i<10;i++){\r\n        boardSetup.push(Array(10).fill(new SquareSegment(NO_STATUS, 0, [SQUARE_CLASS])));\r\n    }\r\n    return boardSetup;\r\n}\r\n\r\n//Square Types\r\n//hoverSquare - potential place for a boat segment\r\n//activeSquare - where a boat segment is placed\r\n//hitSquare - when a boat has been hit\r\n\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            status: STATUS_SETUP, //status types: landing, playing, finished\r\n            player1: {\r\n                id: PLAYER_1,\r\n                name: \"\",\r\n                board: setUpBoard(),\r\n                boats: setUpBoats(),\r\n                status: STATUS_SETUP,\r\n                otherPlayerMessage: \"\",\r\n                boatsSunk: new Set(),\r\n                numGuesses: 0,\r\n                numHits:0,\r\n            },\r\n            player2: {\r\n                id: PLAYER_2,\r\n                name: \"\",\r\n                board: setUpBoard(),\r\n                boats: setUpBoats(),\r\n                status: STATUS_SETUP,\r\n                otherPlayerMessage: \"Your turn first! Sink their ships.\",\r\n                boatsSunk: new Set(),\r\n                numGuesses: 0,\r\n                numHits:0,\r\n            },\r\n            boatBeingPlacedLength: 1,\r\n            placementAxis: VERTICAL_AXIS,\r\n            currentPlayer: PLAYER_1,\r\n            tempboatCoords: [],\r\n            boatsAlreadyPlaced: new Set(),\r\n            errorMessage: \"\",\r\n            displayWinner: \"none\",\r\n            winnerText: \"\",\r\n        }\r\n\r\n        this.handleStartSetup = this.handleStartSetup.bind(this);\r\n        this.handleAdvanceToSetup = this.handleAdvanceToSetup.bind(this);\r\n        this.handlePlaceBoatHover = this.handlePlaceBoatHover.bind(this);\r\n        this.handlePlaceBoatHoverOut = this.handlePlaceBoatHoverOut.bind(this);\r\n        this.handlePlaceBoatClick = this.handlePlaceBoatClick.bind(this);\r\n        this.handleSetBoatToPlace = this.handleSetBoatToPlace.bind(this);\r\n        this.handleAxisPlacementChange = this.handleAxisPlacementChange.bind(this);\r\n        this.getSquareElement = this.getSquareElement.bind(this);\r\n        this.updateBoard = this.updateBoard.bind(this);\r\n        this.updateBoats = this.updateBoats.bind(this);\r\n        this.handleResetSetup = this.handleResetSetup.bind(this);\r\n        this.handleAdvanceToPlay = this.handleAdvanceToPlay.bind(this)\r\n        this.handleAdvanceToNextPlayer = this.handleAdvanceToNextPlayer.bind(this)\r\n        this.handleGuessClick = this.handleGuessClick.bind(this)\r\n        this.getCoords = this.getCoords.bind(this)\r\n        this.checkGoodToPlaceHover = this.checkGoodToPlaceHover.bind(this)\r\n        this.checkGoodToPlaceClick = this.checkGoodToPlaceClick.bind(this)\r\n        this.handleAdvancePlayer = this.handleAdvancePlayer.bind(this)\r\n        this.checkName = this.checkName.bind(this)\r\n\r\n    }\r\n\r\n    checkGoodToPlaceHover(playerBoats,coords){\r\n        let goodToPlace = true\r\n\r\n        playerBoats.forEach((boat) => {\r\n            if(boat.coordinates.length > 0){\r\n                //if coords are in boat.coordinates, don't set boatToPlace array\r\n                    //and don't advance boatToPlace\r\n                boat.coordinates.forEach((boatPlacedCoords) =>{\r\n                    if(coords[0] === boatPlacedCoords[0] && coords[1] === boatPlacedCoords[1]){\r\n                        goodToPlace = false;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        return goodToPlace;\r\n    }\r\n\r\n    checkGoodToPlaceClick(playerBoats,potentialBoat){\r\n        let goodToPlace = true;\r\n\r\n        potentialBoat.forEach((potentialCoord) => {\r\n            let potentialX = potentialCoord[0];\r\n            let potentialY = potentialCoord[1];\r\n\r\n            playerBoats.forEach((boat) =>{\r\n                let boatLocation = boat.coordinates;\r\n\r\n                boatLocation.forEach((coord) => {\r\n                    if(coord[0] === potentialX && coord[1] === potentialY){\r\n                        goodToPlace = false;\r\n                    }\r\n\r\n                });\r\n            });\r\n        });\r\n        return goodToPlace;\r\n    }\r\n\r\n    checkName() {\r\n        let playerName;\r\n\r\n        this.state.currentPlayer === PLAYER_1 ? playerName = this.state.player1.name : playerName = this.state.player2.name;\r\n        if(playerName === undefined || playerName === \"\"){\r\n            let newErrorMessage = (`Please enter a name for ${this.state.currentPlayer}`);\r\n            this.setState({errorMessage: newErrorMessage})\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getSquareElement(square) { //helper function\r\n        let squareID = square.target.attributes.id.value;\r\n        let element = document.getElementById(squareID);\r\n        return element;\r\n    }\r\n\r\n    getCoords(square){\r\n        const element = this.getSquareElement(square);\r\n        let coords = element.attributes.coords.value.split(\",\");\r\n\r\n        if(coords.length < 1) {\r\n            this.setState({errorMessage: \"the coordinates for the square were not retrieved in handlePlaceBoatHover function in Game element\"})\r\n            return;\r\n        } else {\r\n            coords = [Number(coords[0]), Number(coords[1])];\r\n        }\r\n\r\n        return coords;\r\n    }\r\n\r\n    handleStartSetup (event) {\r\n\r\n        //this one needs some help for error checking\r\n        const name = event.target.value;\r\n        if(name === undefined || name === \"\"){\r\n            let newErrorMessage = (`Please enter a name for ${this.state.currentPlayer}`);\r\n            this.setState({errorMessage: newErrorMessage})\r\n            return;\r\n        } else {\r\n            let newErrorMessage = \"\";\r\n            this.setState({errorMessage: newErrorMessage})\r\n        }\r\n\r\n        if(event.target.id === \"p1\"){\r\n            //more checking to see if name is valid\r\n            this.setState(prevState => {\r\n                let player1 = Object.assign({}, prevState.player1);\r\n                player1.name = name;\r\n                return {player1};\r\n            })\r\n        } else {\r\n            this.setState(prevState => {\r\n                let player2 = Object.assign({}, prevState.player2);\r\n                player2.name = name;\r\n                return {player2};\r\n            })\r\n        }\r\n    }\r\n\r\n    handleAdvancePlayer(){\r\n        this.state.currentPlayer === PLAYER_1 ? this.setState({currentPlayer: PLAYER_2}) : this.setState({currentPlayer: PLAYER_1})\r\n    }\r\n\r\n    handleAdvanceToSetup () {\r\n        if(this.state.player1.name !== \"\" && this.state.player2.name !== \"\"){\r\n            const newStatus = STATUS_SETUP;\r\n            this.setState(() => ({status: newStatus}));\r\n        }\r\n    }\r\n\r\n    handleAdvanceToPlay () {\r\n        if(!this.checkName()){\r\n            let newErrorMessage = (`Please enter a name for ${this.state.currentPlayer}`);\r\n            this.setState({errorMessage: newErrorMessage})\r\n            return;\r\n        }\r\n\r\n        if(this.state.boatsAlreadyPlaced.size < 6){\r\n            this.setState({errorMessage: `${this.state.currentPlayer} has not set all of their boats yet`})\r\n             return;\r\n         }\r\n\r\n        this.setState(prevState => {\r\n            let player2 = Object.assign({}, prevState.player2);\r\n            player2.status = STATUS_PLAYING;\r\n            return {player2};\r\n        });\r\n\r\n        let newStatus = STATUS_PLAYING;\r\n        this.setState(() => ({status: newStatus}));\r\n        this.handleAdvancePlayer()\r\n    }\r\n\r\n    handleAdvanceToNextPlayer (){\r\n\r\n        if(!this.checkName()){\r\n            let newErrorMessage = (`Please enter a name for ${this.state.currentPlayer}`);\r\n            this.setState({errorMessage: newErrorMessage})\r\n            return;\r\n        }\r\n\r\n         if(this.state.boatsAlreadyPlaced.size < 6){\r\n            this.setState({errorMessage: `${this.state.currentPlayer} has not set all of their boats yet`})\r\n             return;\r\n         }\r\n\r\n        if(this.state.currentPlayer === PLAYER_1){\r\n            this.setState(prevState => {\r\n                let player1 = Object.assign({}, prevState.player1);\r\n                player1.status = STATUS_PLAYING;\r\n                return {player1};\r\n            })\r\n        }\r\n\r\n        this.handleAdvancePlayer()\r\n        this.setState({tempboatCoords: []});\r\n        this.setState({boatsAlreadyPlaced: new Set()});\r\n        this.setState({boatBeingPlacedLength: 1});\r\n    }\r\n\r\n    handlePlaceBoatHover (square) {\r\n        //Validate coordinates. Check if already clicked. Check if it is adjacent.\r\n        //Check which boat they are placing down. Set tempBoatstoPlace;\r\n        const currentPlayer = this.state.currentPlayer;\r\n        let coords = this.getCoords(square);\r\n        let newCoordsArray = [];\r\n        let newBoard;\r\n        let playerBoats;\r\n\r\n        //validating player\r\n        if(currentPlayer === PLAYER_1){\r\n            newBoard = this.state.player1.board;\r\n            playerBoats = this.state.player1.boats;\r\n        } else if(currentPlayer === PLAYER_2){\r\n            newBoard = this.state.player2.board;\r\n            playerBoats = this.state.player2.boats;\r\n        }else {\r\n            this.setState({errorMessage: \"player not valid. HandlePlaceBoatHoverfunction.\"})\r\n        }\r\n\r\n        //Check if boat and axis have been selected\r\n        //default set to boat3 and vertical\r\n        if(this.state.placementAxis === \"\" || this.state.boatBeingPlaced === \"\"){\r\n            //NEEDSWORK: error message to select a boat or axis\r\n            //return;\r\n        }\r\n\r\n        const boatLength = this.state.boatBeingPlacedLength;\r\n        let boatsAlreadyPlaced = this.state.boatsAlreadyPlaced;\r\n\r\n        //disallows hovering of boats already placed\r\n        if(boatsAlreadyPlaced.has(boatLength)){\r\n            console.log(\"boat of length \", boatLength, \"already placed.\")\r\n            //NEEDSWORK ^^handle the error properly above\r\n           return;\r\n        }\r\n\r\n        //checks if potential boat hovering coords are overlapping currently placed boats\r\n        let goodToPlace = this.checkGoodToPlaceHover(playerBoats,coords);\r\n\r\n        //checking that boats fits in the bounds of hovering cursor\r\n        //selecting temp boat coordinates based on axis placement\r\n        //setting bounds for boat and checking those bounds\r\n        //NEEDSWORK: don't console log the error, display it dynamically\r\n        if(goodToPlace){\r\n            if(this.state.placementAxis === VERTICAL_AXIS){\r\n                const boundRange = (10 - coords[0]);\r\n                if(boundRange < boatLength){\r\n                    console.log(\"not a good boat\");\r\n                    //NEEDSWORK ^^handle the error properly above\r\n                    return;\r\n                } else {\r\n                    newCoordsArray.push(coords)\r\n                }\r\n                for(let i=1; i<boatLength; i++){\r\n                    let newCoords = [coords[0] + i, coords[1]];\r\n                    newCoordsArray.push(newCoords);\r\n                }\r\n            } else if (this.state.placementAxis === HORIZONTAL_AXIS){\r\n                const boundRange = (10 - coords[1])\r\n                if(boundRange < boatLength){\r\n                    console.log(\"not a good boat\");\r\n                    //NEEDSWORK ^^handle the error properly above\r\n\r\n                    return;\r\n                } else {\r\n                    newCoordsArray.push(coords)\r\n                }\r\n                for(let i=1; i<boatLength; i++){\r\n                    let newCoords = [coords[0], coords[1] + i];\r\n                    newCoordsArray.push(newCoords);\r\n                }\r\n            }\r\n\r\n            //validates that the\r\n            let canPlace = true;\r\n            newCoordsArray.forEach((item) => {\r\n                if(newBoard[item[0]][item[1]].status === STATUS_AFLOAT){\r\n                    canPlace = false;\r\n                }\r\n            });\r\n\r\n            if(canPlace){\r\n                newCoordsArray.forEach((item) => {\r\n                    newBoard[item[0]][item[1]] = new BoatSegment(STATUS_HOVER, this.state.boatBeingPlacedLength, [SQUARE_CLASS, SQUARE_HOVER_CLASS]);//status: str, boat: int, classlist: arr[]\r\n                });\r\n            }\r\n\r\n            this.setState(() => ({tempboatCoords: newCoordsArray}));\r\n            this.updateBoard(newBoard);\r\n\r\n        } else {\r\n            this.setState(() => ({tempboatCoords: []}));\r\n        }\r\n    }\r\n\r\n    handlePlaceBoatHoverOut (square){\r\n        let newBoard\r\n        this.state.currentPlayer === PLAYER_1 ? newBoard = this.state.player1.board : newBoard = this.state.player2.board;\r\n\r\n        this.state.tempboatCoords.forEach((item) => {\r\n           if(newBoard[item[0]][item[1]].status !== STATUS_AFLOAT){\r\n                newBoard[item[0]][item[1]] = new SquareSegment(NO_STATUS, 0, [SQUARE_CLASS]);//status: str, boat: int, classlist: arr[]\r\n            }\r\n        })\r\n\r\n        this.updateBoard(newBoard);\r\n    }\r\n\r\n    handlePlaceBoatClick (square) {\r\n        const boatToPlaceCoords = this.state.tempboatCoords;\r\n        const boatBeingPlaced = this.state.boatBeingPlacedLength;\r\n        let boatsAlreadyPlaced = this.state.boatsAlreadyPlaced;\r\n        let coords = this.getCoords(square);\r\n        let newBoard\r\n        let newBoats;\r\n\r\n        //checks to see if the boat being placed is the same as a boat already placed.\r\n        if(boatToPlaceCoords.length === boatBeingPlaced){\r\n            if(boatToPlaceCoords.length > 0){\r\n                if(this.state.currentPlayer === PLAYER_1){\r\n                    newBoard = this.state.player1.board; newBoats = this.state.player1.boats\r\n                } else {\r\n                    newBoard = this.state.player2.board; newBoats = this.state.player2.boats;\r\n                }\r\n\r\n                let goodToPlace = this.checkGoodToPlaceClick(newBoats,boatToPlaceCoords);\r\n\r\n                if(goodToPlace){\r\n                    boatToPlaceCoords.forEach((item) => {\r\n                        //console.log(newBoard[item[0]][item[1]].status)\r\n                        if(newBoard[item[0]][item[1]].status !== STATUS_AFLOAT){\r\n                            newBoard[item[0]][item[1]] = new BoatSegment(STATUS_AFLOAT, this.state.boatBeingPlacedLength, [SQUARE_CLASS, SQUARE_ACTIVE_CLASS]);//status: str, boat: int, classlist: arr[]\r\n                        }\r\n                    })\r\n\r\n                    newBoats.forEach((item) => {\r\n                        if(item.length === boatBeingPlaced){\r\n                            item.coordinates = boatToPlaceCoords;\r\n                            item.status = STATUS_AFLOAT;\r\n                        }\r\n                    })\r\n\r\n                    if(!boatsAlreadyPlaced.has(boatBeingPlaced)){\r\n                        boatsAlreadyPlaced.add(boatBeingPlaced);\r\n                    }\r\n\r\n                    //automatically set next boat to place.\r\n                    for(let i=6; i>0; i--){\r\n                        if(!boatsAlreadyPlaced.has(i)){\r\n                            this.handleSetBoatToPlace(i)\r\n                        }\r\n                    }\r\n\r\n                    this.updateBoard(newBoard);\r\n                    this.updateBoats(newBoats);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    handleGuessClick (square){\r\n        let coords = this.getCoords(square);\r\n        let playerGuessing, targetBoard, hiddenBoats, boatsSunk, winner, message, newNumGuesses, newNumHits, playerName;\r\n\r\n       //getting current player, player board and boats being guessed on\r\n       if(this.state.currentPlayer === PLAYER_1){\r\n            playerGuessing = this.state.player1.id;\r\n            playerName = this.state.player1.name;\r\n            targetBoard = this.state.player2.board;\r\n            hiddenBoats = this.state.player2.boats;\r\n            boatsSunk = this.state.player2.boatsSunk;\r\n            newNumGuesses = this.state.player2.numGuesses;\r\n            newNumHits = this.state.player2.numHits;\r\n       } else {\r\n            playerGuessing = this.state.player2.id;\r\n            playerName = this.state.player2.name\r\n            targetBoard = this.state.player1.board;\r\n            hiddenBoats = this.state.player1.boats;\r\n            boatsSunk = this.state.player1.boatsSunk;\r\n            newNumGuesses = this.state.player1.numGuesses;\r\n            newNumHits = this.state.player1.numHits;\r\n       }\r\n\r\n       let squareClicked = targetBoard[coords[0]][coords[1]];\r\n       let boatToSink, targetBoatLength;\r\n       newNumGuesses += 1;\r\n\r\n       //check hit\r\n        if(squareClicked.status === STATUS_AFLOAT){//will change no_status to 'status_afloat'\r\n            //may need some validation here\r\n            targetBoatLength = squareClicked.boatLength\r\n            if(targetBoatLength > 0){\r\n                boatToSink = hiddenBoats[targetBoatLength - 1];\r\n            }\r\n            boatToSink.numHits += 1;\r\n            newNumHits += 1;\r\n\r\n            //checks sunk\r\n            if(boatToSink.numHits === targetBoatLength){\r\n                boatToSink.coordinates.forEach((item) => {\r\n                    targetBoard[item[0]][item[1]] = new BoatSegment(STATUS_SUNK, targetBoatLength, [SQUARE_CLASS, SQUARE_SUNK_CLASS])\r\n                });\r\n                boatToSink.status = STATUS_SUNK;\r\n                message = `You sunk their ship #${targetBoatLength}!!`\r\n\r\n                if(!boatsSunk.has(targetBoatLength)){\r\n                    boatsSunk.add(targetBoatLength)\r\n                 }\r\n\r\n                 winner = true; //checkwin\r\n                 for(let i=1;i<7;i++){\r\n                     if(!boatsSunk.has(i)){\r\n                        winner = false;\r\n                     }\r\n                 }\r\n\r\n            } else { //check hit\r\n                targetBoard[coords[0]][coords[1]] = new BoatSegment(STATUS_HIT, targetBoatLength, [SQUARE_CLASS, SQUARE_HIT_CLASS])\r\n                boatToSink.status = STATUS_HIT;\r\n                message = `Nice hit on boat #${targetBoatLength}!! Good guessing.`\r\n            }\r\n\r\n            //putting target boat back into the array\r\n            hiddenBoats[targetBoatLength - 1] = boatToSink;\r\n\r\n        } else if(squareClicked.status === NO_STATUS){ //check miss\r\n            targetBoard[coords[0]][coords[1]] = new SquareSegment(STATUS_MISS, targetBoatLength, [SQUARE_CLASS, SQUARE_MISS_CLASS])\r\n            message = `You missed. Better luck next time:)`\r\n        }\r\n\r\n        if(winner){\r\n            console.log(\"WINNER! \", playerGuessing)\r\n            message = `NICE JOB!! YOU WON!!!!!`\r\n        }\r\n\r\n        //updating State\r\n        if(this.state.currentPlayer === PLAYER_1){\r\n            this.setState(prevState => {\r\n                let player2 = Object.assign({}, prevState.player2);\r\n                player2.board = targetBoard;\r\n                player2.boats = hiddenBoats;\r\n                player2.boatsSunk = boatsSunk;\r\n                player2.otherPlayerMessage = message;\r\n                player2.numGuesses = newNumGuesses;\r\n                player2.numHits = newNumHits;\r\n                return {player2};\r\n            });\r\n        } else {\r\n            this.setState(prevState => {\r\n                let player1 = Object.assign({}, prevState.player1);\r\n                player1.board = targetBoard;\r\n                player1.boats = hiddenBoats;\r\n                player1.boatsSunk = boatsSunk;\r\n                player1.otherPlayerMessage = message;\r\n                player1.numGuesses = newNumGuesses;\r\n                player1.numHits = newNumHits;\r\n                return {player1};\r\n            });\r\n        }\r\n\r\n        if(winner){\r\n            console.log(winner);\r\n            let newDisplayWinner = \"block\";\r\n            let newWinnerText = `Congratulations ${playerName}!`\r\n            this.setState({displayWinner: newDisplayWinner})\r\n            this.setState({winnerText: newWinnerText})\r\n        }\r\n\r\n        //switchPlayerGuessing\r\n        this.handleAdvancePlayer()\r\n    }\r\n\r\n    //this is handling the change of the length of boat being placed in the boatselector.js component.\r\n    handleSetBoatToPlace (boat){\r\n        let boatBeingPlacedLength;\r\n        //checking if a number or html element was passed in\r\n        if(isNaN(boat)){\r\n            let map = boat.target.attributes;\r\n            if(map.length > 1){\r\n                boatBeingPlacedLength = Number(map.boatlength.value);\r\n            }\r\n        } else {\r\n            boatBeingPlacedLength = Number(boat);\r\n        }\r\n\r\n        this.setState(() => ({boatBeingPlacedLength: boatBeingPlacedLength}));\r\n        //change html to show that the specific boat is being placed;\r\n        const selectorElement = document.getElementById(`boat${boatBeingPlacedLength}-selector`);\r\n        selectorElement.classList.add('boat-selector-active');\r\n\r\n        for(let i=1;i<7;i++){\r\n            if(i !== boatBeingPlacedLength){\r\n                let tempElement = document.getElementById(`boat${i}-selector`);\r\n                if(tempElement){\r\n                    if(tempElement.classList){\r\n                        tempElement.classList.remove(`boat-selector-active`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAxisPlacementChange (axis) {\r\n        let newAxis = axis.target.attributes.value.value;\r\n        this.setState(()=> ({placementAxis: newAxis}))\r\n    }\r\n\r\n    handleResetSetup (){\r\n        let newBoard = setUpBoard();\r\n        let newBoats = setUpBoats();\r\n        let newLength = 1;\r\n        let newErrorMessage = \"\";\r\n        this.setState({tempboatCoords: []});\r\n        this.setState({boatBeingPlacedLength: newLength})\r\n        this.setState({boatsAlreadyPlaced: new Set()})\r\n        this.updateBoard(newBoard);\r\n        this.updateBoats(newBoats);\r\n        this.setState({errorMessage: newErrorMessage});\r\n    }\r\n\r\n    //updateBoard helper function\r\n    updateBoard (newBoard){\r\n        if(this.state.currentPlayer === PLAYER_1){\r\n            this.setState(prevState => {\r\n                let player1 = Object.assign({}, prevState.player1);\r\n                player1.board = newBoard;\r\n                return {player1};\r\n            })\r\n        } else if (this.state.currentPlayer === PLAYER_2){\r\n            this.setState(prevState => {\r\n                let player2 = Object.assign({}, prevState.player2);\r\n                player2.board = newBoard;\r\n                return {player2};\r\n            })\r\n        }\r\n    }\r\n\r\n    updateBoats (newBoats){\r\n        if(this.state.currentPlayer === PLAYER_1){\r\n            this.setState(prevState => {\r\n                let player1 = Object.assign({}, prevState.player1);\r\n                player1.boats = newBoats;\r\n                return {player1};\r\n            })\r\n        } else if (this.state.currentPlayer === PLAYER_2){\r\n            this.setState(prevState => {\r\n                let player2 = Object.assign({}, prevState.player2);\r\n                player2.boats = newBoats;\r\n                return {player2};\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"game-container\">\r\n                <Router>\r\n                    <Switch>\r\n                        <Route path=\"/play\">\r\n                            <Play\r\n                                player1={this.state.player1}\r\n                                player2={this.state.player2}\r\n                                player2Name={this.state.player2.name}\r\n                                player1Name={this.state.player1.name}\r\n                                currentPlayer={this.state.currentPlayer}\r\n                                guessClick={(square) => {this.handleGuessClick(square)}}\r\n                            >\r\n                            </Play>\r\n                            <WinnerOverlay\r\n                                displayWinner={this.state.displayWinner}\r\n                                winnerText={this.state.winnerText}\r\n                            ></WinnerOverlay>\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                        {/* <div className=\"center setup-heading\">{this.state.currentPlayer}</div> */}\r\n                            <div className=\"row\">\r\n                                <Landing onBlur={this.handleStartSetup}\r\n                                    currentPlayer={this.state.currentPlayer}\r\n                                    onClick={this.handleAdvanceToSetup}\r\n                                    errorMessage={this.state.errorMessage}\r\n                                    />\r\n                                <Setup\r\n                                    player1={this.state.player1}\r\n                                    player2={this.state.player2}\r\n                                    onMouseOver={(square) => {this.handlePlaceBoatHover(square)}}\r\n                                    onMouseOut={(square) => {this.handlePlaceBoatHoverOut(square)}}\r\n                                    boatSelectorClick={(boat) => {this.handleSetBoatToPlace(boat)}}\r\n                                    axisPlacementClick={(axis) => {this.handleAxisPlacementChange(axis)}}\r\n                                    squareSelectorClick={(square) => {this.handlePlaceBoatClick(square)}}\r\n                                    resetClick={this.handleResetSetup}\r\n                                    advanceToPlay={this.handleAdvanceToPlay}\r\n                                    advanceToNextPlayer={this.handleAdvanceToNextPlayer}/>\r\n                            </div>\r\n\r\n                        </Route>\r\n                    </Switch>\r\n                </Router>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n\r\n","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\n\r\nfunction Game () {\r\n\r\n\r\n    return (\r\n        <div className=\"header\"> - Battleship - </div>\r\n    )\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport '../styles/index.css';\r\n\r\nfunction PlayerMessage (props) {\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <div className=\"footer\">\r\n                <div>Built by Jefferson Ostler</div>\r\n                <div className=\"footer-item-container\">\r\n                    <span className=\"footer-item\">React.js</span>\r\n                    <a className=\"footer-item\" href=\"https://www.jeffersonostler.com\" target=\"_blank\">jeffersonostler.com</a>\r\n                    <span className=\"footer-item\">BYU MISM</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerMessage;","import React from 'react';\r\n// import Landing from './landing'\r\n// import SetUp from './setup'\r\nimport Game from './game'\r\nimport Header from './header'\r\nimport Footer from './footer'\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\r\nimport '../styles/index.css';\r\n\r\nfunction App () {\r\n\r\n    return (\r\n        <div>\r\n            <Header></Header>\r\n            <Game></Game>\r\n            <Footer></Footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app.js'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}